#!/usr/bin/env python
""" clusterUFiberPrior

Python command line interface for converting vtk polydata to nifti using
Camino. Outputs image with number of streamlines through voxel, raw
streamline counts, and binary mask of tract.

**NOTE**
REQUIRES INSTALLATION OF CAMINO AND ABILITY TO CONVERT FROM VTK TO BFLOAT
WORKS WITH SINGULARITY CONTAINER (RECIPE CAN BE FOUND IN GIT REPO:
https://github.com/kaitj/neurobeer)

"""
def getBIDS(bids_layout, subjid, ref_img):
    subjid = subjid.lstrip('sub-')

    # Grab necessary files
    nii = bids_layout.get(subject=subjid, type=ref_img,
                             return_type='file', extensions=['nii', 'nii.gz'])

    return nii[0]


def proc_cmd(cmd):
    procCmd = cmd.split(" ")

    return procCmd


def get_parser():
    """
    Argument Parser
    """
    from argparse import ArgumentParser, RawTextHelpFormatter
    from neurobeer._version import __version__

    parser = ArgumentParser(description=('Converts VTK polydata tractography '
                                         'to nifti'),
                            formatter_class=RawTextHelpFormatter)

    # Version option
    parser.add_argument('--version', action='version', version=__version__)

    # Required arguments
    g_req = parser.add_argument_group('required arguments')
    g_req.add_argument('bids_dir', help='Directory with input dataset, '
                                        'formatted according to BIDS standard')
    g_req.add_argument('subjid', help='Participant id to track')
    g_req.add_argument('vtk_dir', help='Derivatives directory where VTKs are '
                                       'located')
    g_req.add_argument('vtk_path', help='Path to VTK to be converted after '
                                        'subject id')
    g_req.add_argument('ref_img', help='Nifti image to use as reference for '
                                       'header (eg. fa, t1, etc.)')

    # Optional arguments
    g_opt = parser.add_argument_group('control arguments')
    g_opt.add_argument('-o', '--out_dir', dest="out_dir",
                                          help="Output directory. Defaults to "
                                            "<bids_dir>/derivatives/neurobeer ")
    g_opt.add_argument('-v', '--verbose', action='count', default=0,
                       help='verbosity of tool')

    return parser


def main():
    """
    Entry point of code
    """
    import os
    import os.path as op
    import subprocess

    from bids.grabbids import BIDSLayout

    args = get_parser().parse_args()
    # Required inputs
    bids_dir = args.bids_dir
    subjid = args.subjid
    vtk_dir = args.vtk_dir
    vtk_path= args.vtk_path
    ref_img = args.ref_img

    # Set output directory
    if args.out_dir:
        out_dir = op.realpath(args.out_dir)
        out_dir = op.join(op.join(out_dir, subjid), 'tractography')
    else:
        out_dir = op.join(op.join('derivatives/camino', subjid),
                                  'tractography')
        out_dir = op.join(op.realpath(bids_dir), out_dir)

    if not op.exists(out_dir):
        os.makedirs(out_dir)

    in_vtk = op.join(op.join(vtk_dir, subjid), vtk_path)

    # Set file defaults
    filename = op.splitext(in_vtk)[-2]
    filename = filename.split('/', -1)[-1]

    # Grab necessary files
    layout = BIDSLayout(bids_dir)
    nii = getBIDS(layout, subjid, ref_img)

    # Read vtk and convert to bfloat
    vtk_str = '"{}"'.format(in_vtk)
    bfloat = filename + '.Bfloat'
    bfloat = op.join(out_dir, bfloat)
    bfloat_str = '"{}"'.format(bfloat)
    cmd = proc_cmd("runOctaveCmd writeCaminoTracts 'readTractsFromVTK(%s)' %s"
                    % (vtk_str, bfloat_str))
    conv_proc = subprocess.Popen(cmd,
                                 stdout=open(os.devnull, 'wb')).communicate()

    if conv_proc[0] is not None or not op.exists(bfloat):
        print("\nError converting .vtk to .bfloat")
        exit()

    if args.verbose != 0:
        print("\nConverting tractography to nifti...")

    # Process streamlines
    out_root = filename + '_'
    out_root = op.join(out_dir, out_root)

    cmd = proc_cmd("%s" % (bfloat))
    bfloat_proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    cmd = proc_cmd("procstreamlines -header %s -outputacm -outputsc "
                   "-outputroot %s" % (nii, out_root))
    streamlines_proc = subprocess.Popen(cmd,
                                       stdout=open(os.devnull, 'wb').communiate(),
                                       stdin=bfloat_proc.stdout).communicate()

    if streamlines_proc[0] is not None:
        print("\nError converting to nifti.")

    if args.verbose != 0:
        print("\nBinarizing generated tractography mask")

    # Binarize mask
    out_nii = filename +'.nii.gz'
    out_nii = op.join(out_dir, out_nii)

    out_acm = filename + '_acm_sc.nii.gz'
    out_acm = op.join(out_dir, out_acm)

    cmd = proc_cmd("fsl5.0-fslmaths %s -bin %s" % (out_acm, out_nii))
    fsl_proc = subprocess.Popen(cmd,
                                stdout=open(os.devnull, 'wb')).communicate()

    if fsl_proc[0] is not None:
        print("\nError binarizing tractography mask")


if __name__ == '__main__':
    main()
